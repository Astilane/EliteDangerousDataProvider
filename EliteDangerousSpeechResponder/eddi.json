{
  "name": "EDDI",
  "description": "A balanced, non-partisan personality",
  "scripts": {
    "Bond awarded": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "That's another {event.reward} credits in the bank.",
      "name": "Bond awarded",
      "description": "Triggered when you are awarded a combat bond"
    },
    "Exploration data sold": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Exploration data for {len(event.systems)} systems sold for {Humanise(event.reward)} credits\r\n\r\n{if len(event.firsts) > 0:\r\n    , with an additional bonus of {Humanise(event.bonus)} credits for\r\n    {if len(event.firsts) = 1:\r\n        one first discovery\r\n    |else:\r\n        {len(event.firsts)} first discoveries\r\n    }\r\n}\r\n.",
      "name": "Exploration data sold",
      "description": "Triggered when you sell exploration data"
    },
    "Exploration data purchased": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Purchased {OneOf('system', 'exploration')} data for {P(event.system)}\",\r\n            \"{OneOf('system', 'exploration')} data for {P(event.system)} now available\",\r\n            \"Received {OneOf('system', 'exploration')} data for {P(event.system)} from station services\",\r\n            \"Receipt of {P(event.system)} {OneOf('system', 'exploration')} data confirmed\")}.",
      "name": "Exploration data purchased",
      "description": "Triggered when you purchase exploration data"
    },
    "Material discovered": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Material discovered",
      "description": "Triggered when you discover a material"
    },
    "Material discarded": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Material discarded",
      "description": "Triggered when you discard a material"
    },
    "Material collected": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Material collected",
      "description": "Triggered when you collect a material"
    },
    "Killed": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Killed",
      "description": "Triggered when you kill another player"
    },
    "Ship Interdiction": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship Interdiction",
      "description": "Triggered when you interdict another ship"
    },
    "Ship interdicted": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship interdicted",
      "description": "Triggered when your ship is interdicted by another ship"
    },
    "Commander ratings": {
      "enabled": false,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Commander ratings",
      "description": "Triggered when your ratings are reported"
    },
    "Commander progress": {
      "enabled": false,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Commander progress",
      "description": "Triggered when your progress is reported"
    },
    "Commander started": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Welcome, Commander.",
      "name": "Commander started",
      "description": "Triggered when you start a new game"
    },
    "Controlling ship": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {Occasionally(2, \"to fighter\")} {OneOf(\"terminated\", \"disengaged\")}.",
      "name": "Controlling ship",
      "description": "Triggered when you switch control from your fighter to your ship"
    },
    "Crew assigned": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{if event.role = \"Active\":\r\n    {event.name} is now on active duty.\r\n|else:\r\n    {event.name} standing down from active duty.\r\n}",
      "name": "Crew assigned",
      "description": "Triggered when you assign crew"
    },
    "Crew fired": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{event.name} is no longer a member of the crew.",
      "name": "Crew fired",
      "description": "Triggered when you fire crew"
    },
    "Crew hired": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{event.name} has joined the crew.",
      "name": "Crew hired",
      "description": "Triggered when you hire crew"
    },
    "Died": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Died",
      "description": "Triggered when you have died"
    },
    "Cleared save": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Goodbye {F(\"Honorific\")}.  It was a pleasure to serve you.",
      "name": "Cleared save",
      "description": "Triggered when you clear your save"
    },
    "Ship purchased": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship purchased",
      "description": "Triggered when you purchase a ship"
    },
    "Trade data purchased": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Purchased trade data for {P(event.system)}\",\r\n            \"Trade data for {P(event.system)} now available\",\r\n            \"Received trade data for {P(event.system)} from station services\",\r\n            \"Receipt of {P(event.system)} trade data confirmed\")}.",
      "name": "Trade data purchased",
      "description": "Triggered when you purchase trade data"
    },
    "Ship transfer initiated": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship transfer initiated",
      "description": "Triggered when you initiate a ship transfer"
    },
    "Ship swapped": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship swapped",
      "description": "Triggered when you swap a ship"
    },
    "Ship sold": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Ship sold",
      "description": "Triggered when you sell a ship"
    },
    "Hull damaged": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{if event.health < 40:\r\n    Danger:\r\n|elif event.health < 60:\r\n    Warning:\r\n|elif event.health < 80:\r\n    Caution:\r\n}\r\n{OneOf(\"Hull\", \"Hull integrity\", \"Structural integrity\")} is at {event.health}%.\r\n",
      "name": "Hull damaged",
      "description": "Triggered when your hull is damaged to a certain extent"
    },
    "Entered signal source": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{if event.threat < 2:\r\n  Entering signal source.\r\n|elif event.threat = 2:\r\n    Caution: entering medium-threat signal source.\r\n|elif event.threat = 3:\r\n    Warning: entering high-threat signal source.\r\n|else:\r\n    Danger: entering very high-threat signal source.\r\n}\r\n",
      "name": "Entered signal source",
      "description": "Triggered when your ship enters a signal source"
    },
    "Message sent": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Message away\", \"Message sent\", \"Sent\")}.",
      "name": "Message sent",
      "description": "Triggered when you send a message"
    },
    "Message received": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Message received from {event.from}.  Message reads: {event.message}.",
      "name": "Message received",
      "description": "Triggered when you receive a message"
    },
    "Reboot repair": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Reboot repair",
      "description": "Triggered when you run reboot/repair on your ship"
    },
    "Controlling fighter": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Neural link\", \"Link\", \"Uplink\")} {Occasionally(2, \"to fighter\")} {OneOf(\"initiated\", \"established\", \"engaged\")}.",
      "name": "Controlling fighter",
      "description": "Triggered when you switch control from your ship to your fighter"
    },
    "Self destruct": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Self-destruct sequence initiated.  Closing heat vents.",
      "name": "Self destruct",
      "description": "Triggered when you start the self destruct sequence"
    },
    "SRV launched": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} {OneOf(\"launched\", \"away\")}.",
      "name": "SRV launched",
      "description": "Triggered when you launch an SRV from your ship"
    },
    "SRV docked": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Buggy\", \"SRV\")} docked.",
      "name": "SRV docked",
      "description": "Triggered when you dock an SRV with your ship"
    },
    "Fighter docked": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Fighter {OneOf(\"docked\", \"redocked\")} {Occasionally(2, \"with ship\")}.",
      "name": "Fighter docked",
      "description": "Triggered when you dock a fighter with your ship"
    },
    "Fighter launched": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Fighter launched {Occasionally(2, \"from ship\")}.",
      "name": "Fighter launched",
      "description": "Triggered when you launch a fighter from your ship"
    },
    "Commodity sold": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You have just sold {event.amount}\r\n{if event.amount = 1 : \r\n    tonne of {event.commodity} for {event.price} credits\r\n|else:\r\n    tonnes of {event.commodity} at {event.price} credits per tonne.  Total value is {event.amount * event.price} credits\r\n},\r\n\r\n{if event.profit = 0:\r\n  with which you break even\r\n|elif event.profit < 0:\r\n  giving you a net loss of {event.profit * -1 * event.amount} credits\r\n|else:\r\n  giving you a net profit of {event.profit * event.amount} credits\r\n}.",
      "name": "Commodity sold",
      "description": "Triggered when you sell a commodity to the markets"
    },
    "Bounty incurred": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{P(event.faction)} just put a bounty of {event.bounty} credits on your head.",
      "name": "Bounty incurred",
      "description": "Triggered when you incur a bounty"
    },
    "Cargo ejected": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{event.cargo} ejected.",
      "name": "Cargo ejected",
      "description": "Triggered when you eject cargo from your ship or SRV"
    },
    "Commodity purchased": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You have just purchased {event.amount}\r\n{if event.amount = 1 : \r\n    tonne of {event.commodity} for {event.price} credits\r\n|else:\r\n    tonnes of {event.commodity} at {event.price} credits per tonne.  Total cost is {event.amount * event.price} credits\r\n}.",
      "name": "Commodity purchased",
      "description": "Triggered when you buy a commodity from the markets"
    },
    "Docking timed out": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "No response to our docking request.",
      "name": "Docking timed out",
      "description": "Triggered when your docking request times out"
    },
    "Docking denied": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "We have been denied docking.",
      "name": "Docking denied",
      "description": "Triggered when your ship is denied docking at a station or outpost"
    },
    "Docking granted": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Docking granted",
      "description": "Triggered when your ship is granted docking permission at a station or outpost"
    },
    "Docking cancelled": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Docking request cancelled.",
      "name": "Docking cancelled",
      "description": "Triggered when your ship cancels a docking request at a station or outpost"
    },
    "Docking requested": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{ShipCallsign()} requesting docking.",
      "name": "Docking requested",
      "description": "Triggered when your ship requests docking at a station or outpost"
    },
    "Heat damage": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{Occasionally(2, \"Danger:\")}\r\nHeat damage.",
      "name": "Heat damage",
      "description": "Triggered when your ship is taking damage from excessive heat"
    },
    "Heat warning": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{Occasionally(2, \"Warning:\")}\r\nHeat levels beyond operating tolerance.",
      "name": "Heat warning",
      "description": "Triggered when your ship's heat exceeds 100%"
    },
    "Location": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You are\r\n{if event.docked:\r\n    docked at {P(event.body)}\r\n|else if event.body:\r\n    near {P(event.body)}\r\n}\r\nin the {P(event.system)} system.",
      "name": "Location",
      "description": "Triggered when the commander's location is reported"
    },
    "Shields down": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Shields down",
      "description": "Triggered when your ship's shields go offline"
    },
    "Shields up": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Shields up",
      "description": "Triggered when your ship's shields come online"
    },
    "Body scanned": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Scan of {P(event.name)} complete.\r\n\r\nThis is a\r\n{if event.gravity < 0.5:\r\n    low-gravity\r\n|elif event.gravity <2:\r\n    medium-gravity\r\n|elif event.gravity <4:\r\n    high-gravity\r\n|else:\r\n    extremely high-gravity\r\n}\r\n\r\n{if event.tidallylocked:\r\n    tidally-locked\r\n}\r\n\r\n{if event.terraformstate = \"Terraformable\":\r\n    terraformable\r\n|elif event.terraformstate = \"Terraformed\":\r\n    terraformed\r\n}\r\n\r\n{event.bodyclass}\r\n\r\n{if event.terraformstate = \"Terraforming\":\r\n  in the process of being terraformed\r\n}\r\n\r\nthat is\r\n\r\n{if event.landable:\r\n    suitable\r\n|else:\r\n    not suitable\r\n}\r\nfor landing.\r\n\r\n{_Atmosphere }\r\n\r\n{_ Volcanism}\r\n\r\n{if event.landable :\r\n    {set goodmaterials to []}\r\n    {set greatmaterials to []}\r\n    {for material in event.materials:\r\n        {if material.percentage > material.definition.greatpctbody:\r\n            {set greatmaterials to cat(greatmaterials, [material])}\r\n        |elif material.percentage > material.definition.goodpctbody:\r\n            {set goodmaterials to cat(goodmaterials, [material])}\r\n        }\r\n    }\r\n\r\n    {if len(greatmaterials) > 0:\r\n        This body contains very high levels of\r\n        {if len(greatmaterials) = 1:\r\n            {greatmaterials[0].name}\r\n        |elif len(greatmaterials) = 2:\r\n            {greatmaterials[0].name} and {greatmaterials[1].name}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(greatmaterials):\r\n                {if cur = 0:\r\n                    {greatmaterials[cur].name}\r\n                |elif cur < len(greatmaterials) - 1:\r\n                    , {greatmaterials[cur].name}\r\n                |else:\r\n                    ,and {greatmaterials[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }\r\n    {if len(goodmaterials) > 0:\r\n        {if len(greatmaterials) > 0:\r\n            and high levels of\r\n        |else:\r\n            This body contains high levels of\r\n        }\r\n        {if len(goodmaterials) = 1:\r\n            {goodmaterials[0].name}\r\n        |elif len(goodmaterials) = 2:\r\n            {goodmaterials[0].name} and {goodmaterials[1].name}\r\n        |else:\r\n            {set cur to 0}\r\n            {while cur < len(goodmaterials):\r\n                {if cur = 0:\r\n                    {goodmaterials[cur].name}\r\n                |elif cur < len(goodmaterials) - 1:\r\n                    , {goodmaterials[cur].name}\r\n                |else:\r\n                    ,and {goodmaterials[cur].name}\r\n                }\r\n                {set cur to cur + 1}\r\n            }\r\n        }\r\n    }.\r\n}",
      "name": "Body scanned",
      "description": "Triggered when you complete a scan of a planetary body"
    },
    "Star scanned": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Scan of {event.stellarclass}-class star {P(event.name)} complete.\r\n\r\nThis is\r\n{if event.stellarclass = \"O\":\r\n    an incredibly rare main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"B\":\r\n    a very rare main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"A\":\r\n    a rare main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"F\":\r\n    an uncommon main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"G\":\r\n    a common main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"K\":\r\n    a common main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"M\":\r\n    a very common main sequence star\r\n    {set mainsequence to true}\r\n|elif event.stellarclass = \"L\":\r\n    a brown dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"T\":\r\n    a brown dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"Y\":\r\n    a brown dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"TTS\":\r\n    a T tauri star that is in the process of gravitational contraction\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"AeBe\":\r\n    a very young proto-star yet to enter main sequence {Occasionally(4, \"but on the way to becoming an A or B class star\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"W\":\r\n    an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"WN\":\r\n    an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"WNC\":\r\n    an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"WC\":\r\n    an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"WO\":\r\n    an old star {Occasionally(4, \"nearing the end of its lifecycle and no longer burning hydrogen\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"CS\":\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"C\":\r\n    a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"CN\":\r\n    a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"CJ\":\r\n    a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(2, \"with high levels of carbon 13 in its atmosphere\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"CH\":\r\n    a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"CHd\":\r\n    a {Occasionally(2, \"late-sequence\")} carbon star {Occasionally(4, \"with an atmosphere dominated by carbon\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"MS\":\r\n    a late sequence star {Occasionally(4, \"that was once an M class star and is on the way to becoming a carbon star\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"S\":\r\n    a late sequence star {Occasionally(4, \"that was once an M class star and is becoming a carbon star\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"D\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DA\":\r\n    a white dwarf {Occasionally(4, \"with a hydrogen-rich atmosphere\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DAB\":\r\n    a white dwarf {Occasionally(4, \"with an atmosphere rich in hydrogen and helium\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DAO\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DAZ\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DAV\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DB\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DBZ\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DBV\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DO\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DOV\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DQ\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DC\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DCV\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"DX\":\r\n    a white dwarf\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"N\":\r\n    a neuutron star {Occasionally(4, \"that has a dangerously high-density core\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"H\":\r\n    a black hole\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"X\":\r\n    an exotic stellar entity\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"SuperMassiveBlackHole\":\r\n     a supermassive black hole\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"A_BlueWhiteSuperGiant\":\r\n    a blue-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"F_WhiteSuperGiant\":\r\n    a yellow-white supergiant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"M_RedSuperGiant\":\r\n    a red supergiant {Occasionally(4, \"in its helium burning phase\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"M_RedGiant\":\r\n    a red giant {Occasionally(4, \"that is expanding towards being a red supergiant\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"K_OrangeGiant\":\r\n    an orange giant {Occasionally(4, \"that is expanding as it heads towards the end of its life\")}\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"RoguePlanet\":\r\n    a rogue planet\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"Nebula\":\r\n    a nebula\r\n    {set mainsequence to false}\r\n|elif event.stellarclass = \"StellarRemnantNebula\":\r\n    a nebula remnant\r\n    {set mainsequence to false}\r\n}\r\n\r\n{OneOf(\"that has been around for {Humanise(event.age)} years\",\r\n             \"that is {Humanise(event.age)} years old\",\r\n             \"of {Humanise(event.age)} years\",\r\n)}\r\n{if event.age < 1000000:\r\n    making it one of the youngest stars in the galaxy\r\n|elif event.age >14000000000:\r\n    making it one of the oldest stars in the galaxy\r\n}.\r\n\r\n{if mainsequence = true:\r\n    {Occasionally(2,\"As you can see, it emits a {event.chromaticity} light.\")}\r\n\r\n    {set notables to []}\r\n\r\n    {if event.massprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"an incredibly low solar mass of \", Humanise(event.solarmass))])}\r\n    |elif event.massprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"an extremely low solar mass of \", Humanise(event.solarmass))])}\r\n    |elif event.massprobability <1:\r\n        {set notables to cat(notables, [\"an unusually low mass\"])}\r\n    |elif event.massprobability <10:\r\n        {set notables to cat(notables, [\"lower than average mass\"])}\r\n    |elif event.massprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"an incredibly high solar mass of \", Humanise(event.solarmass))])}\r\n    |elif event.massprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an extremely high solar mass of \", Humanise(event.solarmass))])}\r\n    |elif event.massprobability > 99:\r\n        {set notables to cat(notables, [\"an unusually high mass\"])}\r\n    |elif event.massprobability > 90:\r\n        {set notables to cat(notables, [\"higher than average mass\"])}\r\n    }\r\n\r\n    {if event.radiusprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"an incredibly low solar radius of \", Humanise(event.solarradius))])}\r\n    |elif event.radiusprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"an extremely low solar radius of \", Humanise(event.solarradius))])}\r\n    |elif event.radiusprobability <1:\r\n        {set notables to cat(notables, [\"an unusually low radius\"])}\r\n    |elif event.radiusprobability <10:\r\n        {set notables to cat(notables, [\"lower than average radius\"])}\r\n    |elif event.radiusprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"an extremely high solar radius of \", Humanise(event.solarradius))])}\r\n    |elif event.radiusprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high solar radius of \", Humanise(event.solarradius))])}\r\n    |elif event.radiusprobability > 99:\r\n        {set notables to cat(notables, [\"an unusually high radius\"])}\r\n    |elif event.radiusprobability > 90:\r\n        {set notables to cat(notables, [\"higer than average radius\"])}\r\n    }\r\n\r\n    {_ Use luminosity probability but report temperature}\r\n    {if event.luminosityprobability < 0.01:\r\n        {set notables to cat(notables, [cat(\"an incredibly low temperature of \", Humanise(event.temperature), \" kelvin\")])}\r\n    |elif event.luminosityprobability <0.1:\r\n        {set notables to cat(notables, [cat(\"an extremely low temperature of \", Humanise(event.temperature), \" kelvin\")])}\r\n    |elif event.luminosityprobability <1:\r\n        {set notables to cat(notables, [\"an unusually low temperature\"])}\r\n    |elif event.luminosityprobability <10:\r\n        {set notables to cat(notables, [\"lower than average temperature\"])}\r\n    |elif event.luminosityprobability > 99.99:\r\n        {set notables to cat(notables, [cat(\"an extremely high temperature of \", Humanise(event.temperature), \" kelvin\")])}\r\n    |elif event.luminosityprobability > 99.9:\r\n        {set notables to cat(notables, [cat(\"an incredibly high temperature of \", Humanise(event.temperature), \" kelvin\")])}\r\n    |elif event.luminosityprobability > 99:\r\n        {set notables to cat(notables, [\"an unusually high temperature\"])}\r\n    |elif event.luminosityprobability > 90:\r\n        {set notables to cat(notables, [\"higer than average temperature\"])}\r\n    }\r\n\r\n    {if len(notables) = 0:\r\n        {OneOf(\"\", \"This is a typical example of this class of star.\", \"There is nothing particularly notable about this star.\", \"It is an average example for such a star.\")}\r\n    |elif len(notables) = 1:\r\n        Compared to other stars in its class, this star is notable for having {notables[0]}.\r\n    |elif len(notables) = 2:\r\n        Compared to other stars in its class, this star is interesting, with {notables[0]} and {notables[1]}.\r\n    |elif len(notables) = 3:\r\n        Compared to other stars in its class, this star is exceptional, with {notables[0]}, {notables[1]} and {notables[2]}.\r\n    }\r\n|else:\r\n    {_ Non-main sequence stars}\r\n\r\n    {if event.stellarclass = \"H\":\r\n        \r\n    |elif event.stellarclass = \"H\":\r\n    |else:\r\n\r\n    }\r\n}\r\n",
      "name": "Star scanned",
      "description": "Triggered when you complete a scan of a stellar body"
    },
    "Cockpit breached": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Is it me, or is it cold in here?",
      "name": "Cockpit breached",
      "description": "Triggered when your ship's cockpit is broken"
    },
    "Cargo collected": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{event.cargo} now on board.",
      "name": "Cargo collected",
      "description": "Triggered when you pick up cargo in your ship or SRV"
    },
    "Exploration promotion": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You have been recognised for your exploration skills, {F(\"Honorific\")}.",
      "name": "Exploration promotion",
      "description": "Triggered when your exploration rank increases"
    },
    "Screenshot": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Screenshot",
      "description": "Triggered when you take a screenshot"
    },
    "Trade promotion": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You have been recognised for your trading ability, {F(\"Honorific\")}.",
      "name": "Trade promotion",
      "description": "Triggered when you trade rank increases"
    },
    "Combat promotion": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You have been recognised for your combat skills, {F(\"Honorific\")}.",
      "name": "Combat promotion",
      "description": "Triggered when your combat rank increases"
    },
    "Fine incurred": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "You owe {P(event.faction)} {event.fine} credits for that.",
      "name": "Fine incurred",
      "description": "Triggered when your incur a fine"
    },
    "Entered normal space": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"{ship.name} is\", \"\")} {OneOf(\"leaving supercruise\", \"{OneOf(\\\"entering\\\", \\\"returning to\\\", \\\"dropping to\\\")} normal space\")}.",
      "name": "Entered normal space",
      "description": "Triggered when your ship enters normal space"
    },
    "Entered supercruise": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"{ship.name} is\", \"\")} entering supercruise.",
      "name": "Entered supercruise",
      "description": "Triggered when your ship enters supercruise"
    },
    "Bounty awarded": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{if event.reward > 0:\r\n    Bounty voucher of {event.reward} credits received from {P(event.faction)}.\r\n}",
      "name": "Bounty awarded",
      "description": "Triggered when you are awarded a bounty"
    },
    "Commander continued": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Welcome back {F(\"Honorific\")}.",
      "name": "Commander continued",
      "description": "Triggered when you continue an existing game"
    },
    "Liftoff": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Lift off.",
      "name": "Liftoff",
      "description": "Triggered when your ship lifts off from a planet's surface"
    },
    "Touchdown": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "Touchdown.  Co-ordinates are {event.longitude} degrees longitude, {event.latitude} degrees latitude.",
      "name": "Touchdown",
      "description": "Triggered when your ship touches down on a planet's surface"
    },
    "Undocked": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Full control re-established\", \"Docking clamps free\", \"Disengaged from local networks\")}.\r\n",
      "name": "Undocked",
      "description": "Triggered when your ship undocks from a station or outpost"
    },
    "Docked": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Establishing uplink\", \"Initiating link to local networks\", \"Access to local networks obtained\")}.",
      "name": "Docked",
      "description": "Triggered when your ship docks at a station or outpost"
    },
    "Jumped": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": null,
      "name": "Jumped",
      "description": "Triggered when you complete a jump to another system"
    },
    "Galnet news published": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{if len(event.items) = 0:\r\n    A new Galnet article has been published, entitled {event[0].title}\r\n|else:\r\n    {len(event.items)} new Galnet articles have been published.  Their titles are\r\n    {set item to 0}\r\n    {while item < len(event.items):\r\n        {if item = len(event.items) - 1:\r\n            and {event.items[item].title}\r\n        |else:\r\n            {event.items[item].title},\r\n        }\r\n        {set item to item + 1}\r\n    }\r\n}.\r\n",
      "name": "Galnet news published",
      "description": "Triggered when news is published on Galnet"
    },
    "Jumping": {
      "enabled": true,
      "interruptable": true,
      "responder": true,
      "script": "{OneOf(\"Destination confirmed\",\"Jump in progress\",\"Telemetry obtained\")}.\r\n{ShipName()} is {OneOf(\"heading to\", \"on route to\", \"travelling to\", \"in transit to\")} the {P(system.name)} system.\r\n{if system.name = homesystem.name:\r\n    Welcome home, {F(\"Honorific\")}\r\n|else:\r\n    {if lastsystem.allegiance && !system.allegiance:\r\n      You {OneOf(\"are leaving\", \"have left\", \"are no longer in\")} {lastsystem.allegiance} space.\r\n    |elif lastsystem.allegiance && lastsystem.allegiance != system.allegiance && system.allegiance != \"None\":\r\n        You {OneOf(\"are now in\", \"have entered\", \"are entering\")} {system.allegiance} space.\r\n        {if cmdr.title != \"Commander\":\r\n            Welcome back {F(\"Honorific\")}\r\n        }\r\n    }.\r\n\r\n    {if system.visits = 1:\r\n        This is your first visit to this system\r\n    |elif system.visits = 2:\r\n        This is your second visit to this system\r\n    |elif system.visits = 3:\r\n        This is your third visit to this system\r\n    |elif system.visits = 4:\r\n        This is your fourth visit to this system\r\n    |else:\r\n        You have visited this system {system.visits} times\r\n    }.\r\n\r\n    {if !system.population:\r\n        {OneOf(\"This system is unpopulated\",\"There is no human presence here\", \"Humans have yet to colonise this system\")}.\r\n    |else:\r\n        {F(\"System report\")}\r\n    }\r\n\r\n    {if system.distancefromhome:\r\n        {Occasionally(7, \"{OneOf(\\\"You are\\\", \\\"Current location is\\\", \\\"You are now\\\")} {Humanise(system.distancefromhome)} lightyears from {OneOf(\\\"home\\\", \\\"{P(homesystem.name)}\\\")}.\")}\r\n    }\r\n\r\n    {if system.comment:\r\n        You made a {OneOf(\"note\", \"comment\", \"remark\")} {OneOf(\"about\", \"for\", \"on\")} this system.  It {OneOf(\"is as follows\", \"says\", \"reads\", \"is\")} {system.comment}.\r\n    }\r\n}",
      "name": "Jumping",
      "description": "Triggered when you start a jump to another system"
    },
    "Honorific": {
      "enabled": true,
      "interruptable": true,
      "responder": false,
      "script": "{if system.allegiance = \"Empire\":\r\n    {if cmdr.empirerating <= 4:\r\n       commander\r\n    |elif cmdr.empirerating = 5:\r\n        sir\r\n    |elif cmdr.empirerating <= 11:\r\n        my lord\r\n    |elif cmdr.empirerating = 12:\r\n        your grace\r\n    |elif cmdr.empirerating = 13:\r\n        your royal highness\r\n    |elif cmdr.empirerating = 14:\r\n        your majesty\r\n    }\r\n|elif system.allegiance = \"Federation\":\r\n    {if cmdr.federationrating= 0:\r\n        commander\r\n    |else:\r\n        {cmdr.federationrating.name}\r\n    }\r\n|else:\r\n    commander\r\n}\r\n",
      "name": "Honorific",
      "description": "Function to provide a suitable honorific for your commander"
    },
    "Station report": {
      "enabled": true,
      "interruptable": true,
      "responder": false,
      "script": "Nothing of interest here.",
      "name": "Station report",
      "description": "Function to report on the details of the current station"
    },
    "System report": {
      "enabled": true,
      "interruptable": true,
      "responder": false,
      "script": "{OneOf(\"This is\", \"This system is\", \"{P(system.name)} is\")}\r\n{if system.allegiance = \"Federation\":\r\n    a Federation\r\n|elif system.allegiance = \"Empire\":\r\n    an Empire\r\n|else:\r\n    an independent\r\n}\r\n{if system.government:\r\n    {system.government}\r\n|else:\r\n  system\r\n}\r\n{OneOf(\"of\", \"with a population of\", \"home to\", \"supporting\")} {Humanise(system.population)} {OneOf(\"people\", \"souls\")}\r\n{if system.power:\r\n    , {OneOf(\"aligned to\", \"allied with\", \"controlled by\")} {P(system.power)}\r\n}.\r\n\r\n{if system.faction:\r\n  {P(system.faction)} is the {OneOf(\"controlling\", \"local\", \"immediate\")} {OneOf(\"power\", \"faction\")}.\r\n}\r\n\r\n{if len(system.stations) = 0:\r\n  There are no stations\r\n|else:\r\n    {if len(system.orbitalstations) = 0:\r\n        {if len(system.planetarystations) = 1:\r\n            There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} planetary station\r\n        |else:\r\n            There are {len(system.planetarystations)} planetary stations\r\n        }\r\n    |elif len(system.orbitalstations) = 1:\r\n        There is {OneOf(\"a single\", \"a lone\", \"just one\", \"one\")} orbital station\r\n        {if len(system.planetarystations) = 1:\r\n            and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n        |elif len(system.planetarystations) > 1:\r\n            and {len(system.planetarystations)} planetary stations\r\n        }\r\n    |else:\r\n        There are {len(system.orbitalstations)} orbital stations\r\n        {if len(system.planetarystations) = 1:\r\n            and {OneOf(\"a lone\", \"a single\", \"one\")} planetary station\r\n        |else:\r\n            and {len(system.planetarystations)} planetary stations\r\n        }\r\n    }\r\n}\r\n{OneOf(\"here\", \"in this system\")}.\r\n\r\n{_ TODO: system state}\r\n",
      "name": "System report",
      "description": "Function to report on the details of the current star system"
    }
  }
}
